/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.palashmax.mangareader

import com.github.kittinunf.fuel.httpDownload
import com.github.kittinunf.fuel.httpGet
import com.github.kittinunf.result.Result;
import org.jsoup.Jsoup
import java.io.File
import java.util.*
import java.util.stream.Collectors
import java.util.stream.IntStream
import kotlin.collections.ArrayList

class MangaReader {
    fun fetchTitles(url_prefix: String = "https://www.mangareader.net"): List<Map<String, String>> {
        val (_, _, result) = "$url_prefix/alphabetical"
            .httpGet()
            .responseString()

        when (result) {
            is Result.Failure -> {
                val ex = result.getException()
                println(ex)
            }
            is Result.Success -> {
                val data = result.get()
                var doc = Jsoup.parse(data)
                // doc.getElementsByClass("series_alpha")
                var series_alpha_uls = doc.select("div.d40 ul li a")
                var mangaList = ArrayList<Map<String, String>>()
                series_alpha_uls.stream().forEach { series_alpha_ul ->
                    mangaList.add(
                        mapOf(
                            Pair( "url", url_prefix + series_alpha_ul.attr("href") ),
                            Pair( "name", series_alpha_ul.text() )
                        )
                    )
                }
                return mangaList
            }
        }
        return ArrayList<Map<String, String>>()
    }

    fun fetchChapters(url: String, url_prefix: String = "https://www.mangareader.net"): List<Map<String, String>> {
        val (_, _, result) = url
                .httpGet()
                .responseString()

        when (result) {
            is Result.Failure -> {
                val ex = result.getException()
                println(ex)
            }
            is Result.Success -> {
                val data = result.get()
                var doc = Jsoup.parse(data)
                // doc.getElementsByClass("series_alpha")
                var chapter_list = doc.select("table.d48 a")
                var chapters = ArrayList<Map<String, String>>()
                chapter_list.stream().forEach { chapter_a ->
                    chapters.add(
                        mapOf(
                                Pair( "url", url_prefix + chapter_a.attr("href") ),
                                Pair( "name", chapter_a.text() )
                        )
                    )
                }
                return chapters
            }
        }
        return ArrayList<Map<String, String>>()
    }

    fun fetchPageImages(url: String): List<String> {
        var pageNumber = 0
        var pages = ArrayList<String>()
        while(pageNumber < 1000){
            var suffix = "/"
            if(pageNumber > 0){
                suffix += pageNumber.toString()
            }
            var img = getCurrentPageImage("${url}${suffix}");
            if(!pages.isEmpty() && pages.last() == img){
                break
            }
            pages.add(img)

            pageNumber++
        }
        return pages
    }

    fun getCurrentPageImage(url: String): String {
        val (_, _, result) = url
                .httpGet()
                .responseString()

        when (result) {
            is Result.Failure -> {
                val ex = result.getException()
                println(ex)
            }
            is Result.Success -> {
                val data = result.get()
                var doc = Jsoup.parse(data)
                // doc.getElementsByClass("series_alpha")
                var page_image = doc.select("img#ci").attr("src")
                return page_image
            }
        }
        return ""
    }

    fun downloadImage(url: String, folder_name_prefix: String = System.getProperty("user.dir")): String {
        var url_split = url.split("/").reversed()
        var file_name = url_split[0]
        var folder_name = url_split[2]
        folder_name = folder_name_prefix + File.separator + "__dl" + File.separator + folder_name
        if(!File(folder_name).exists()){
            File(folder_name).mkdirs();
        }

        val (_, _, result) = url
            .httpDownload()
            .fileDestination { response, url ->
                File( folder_name + File.separator + file_name)
            }.responseString()

        when(result){
            is Result.Failure -> {
                val ex = result.getException()
                println(ex)
            }
            is Result.Success -> {
                return folder_name + File.separator + file_name
            }
        }
        return ""
    }
}

